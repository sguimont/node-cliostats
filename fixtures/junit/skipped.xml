<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="0.9430000000000001" tests="69" failures="0" skipped="1">
  <testsuite name="Root Suite" timestamp="2016-03-19T18:28:21" tests="0" failures="0" time="0">
  </testsuite>
  <testsuite name="convertLcovToCliostats" timestamp="2016-03-19T18:28:21" tests="2" failures="0" time="0.034">
    <testcase name="Root Suite convertLcovToCliostats should convert a simple lcov file" time="0.014" classname="should convert a simple lcov file">
    </testcase>
    <testcase name="Root Suite convertLcovToCliostats should pass on all appropriate parameters from the environment" time="0.02" classname="should pass on all appropriate parameters from the environment">
    </testcase>
  </testsuite>
  <testsuite name="fetchGitData" timestamp="2016-03-19T18:28:21" tests="10" failures="0" time="0.10499999999999998">
    <testcase name="Root Suite fetchGitData should throw an error when no data is passed" time="0" classname="should throw an error when no data is passed">
    </testcase>
    <testcase name="Root Suite fetchGitData should throw an error when no git context is provided" time="0.001" classname="should throw an error when no git context is provided">
    </testcase>
    <testcase name="Root Suite fetchGitData should throw an error if no head is provided" time="0" classname="should throw an error if no head is provided">
    </testcase>
    <testcase name="Root Suite fetchGitData should throw an error if no head.id is provided" time="0" classname="should throw an error if no head.id is provided">
    </testcase>
    <testcase name="Root Suite fetchGitData should return default values" time="0.014" classname="should return default values">
    </testcase>
    <testcase name="Root Suite fetchGitData should override default values" time="0.013" classname="should override default values">
    </testcase>
    <testcase name="Root Suite fetchGitData should convert git.branch to a string" time="0.026" classname="should convert git.branch to a string">
    </testcase>
    <testcase name="Root Suite fetchGitData should convert git.remotes to an array" time="0.026" classname="should convert git.remotes to an array">
    </testcase>
    <testcase name="Root Suite fetchGitData should save passed remotes" time="0.012" classname="should save passed remotes">
    </testcase>
    <testcase name="Root Suite fetchGitData should execute git commands when a valid commit hash is given" time="0.013" classname="should execute git commands when a valid commit hash is given">
    </testcase>
  </testsuite>
  <testsuite name="getBaseOptions" timestamp="2016-03-19T18:28:21" tests="15" failures="0" time="0.395">
    <testcase name="Root Suite getBaseOptions should set service_job_id if it exists" time="0.013" classname="should set service_job_id if it exists">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set git hash if it exists" time="0.014" classname="should set git hash if it exists">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set git branch if it exists" time="0.011" classname="should set git branch if it exists">
    </testcase>
    <testcase name="Root Suite getBaseOptions should detect current git hash if not passed in" time="0.012" classname="should detect current git hash if not passed in">
    </testcase>
    <testcase name="Root Suite getBaseOptions should detect current git branch if not passed in" time="0.012" classname="should detect current git branch if not passed in">
    </testcase>
    <testcase name="Root Suite getBaseOptions should detect detached git head if no hash passed in" time="0.012" classname="should detect detached git head if no hash passed in">
    </testcase>
    <testcase name="Root Suite getBaseOptions should fail local Git detection if no .git directory" time="0.056" classname="should fail local Git detection if no .git directory">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set repo_token if it exists" time="0.044" classname="should set repo_token if it exists">
    </testcase>
    <testcase name="Root Suite getBaseOptions should detect repo_token if not passed in" time="0.039" classname="should detect repo_token if not passed in">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set service_name if it exists" time="0.036" classname="should set service_name if it exists">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set service_name and service_job_id if it&apos;s running on travis-ci" time="0.045" classname="should set service_name and service_job_id if it&apos;s running on travis-ci">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set service_name and service_job_id if it&apos;s running on jenkins" time="0.045" classname="should set service_name and service_job_id if it&apos;s running on jenkins">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set service_name and service_job_id if it&apos;s running on circleci" time="0.027" classname="should set service_name and service_job_id if it&apos;s running on circleci">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set service_name and service_job_id if it&apos;s running on codeship" time="0.018" classname="should set service_name and service_job_id if it&apos;s running on codeship">
    </testcase>
    <testcase name="Root Suite getBaseOptions should set service_name and service_job_id if it&apos;s running on wercker" time="0.011" classname="should set service_name and service_job_id if it&apos;s running on wercker">
    </testcase>
  </testsuite>
  <testsuite name="getOptions" timestamp="2016-03-19T18:28:22" tests="22" failures="0" time="0.37100000000000005">
    <testcase name="Root Suite getOptions should require a callback" time="0" classname="should require a callback">
    </testcase>
    <testcase name="Root Suite getOptions should get a filepath if there is one" time="0.012" classname="should get a filepath if there is one">
    </testcase>
    <testcase name="Root Suite getOptions should get a filepath if there is one, even in verbose mode" time="0.018" classname="should get a filepath if there is one, even in verbose mode">
    </testcase>
    <testcase name="Root Suite getOptions should set service_job_id if it exists" time="0.022" classname="should set service_job_id if it exists">
    </testcase>
    <testcase name="Root Suite getOptions should set git hash if it exists" time="0.024" classname="should set git hash if it exists">
    </testcase>
    <testcase name="Root Suite getOptions should set git branch if it exists" time="0.022" classname="should set git branch if it exists">
    </testcase>
    <testcase name="Root Suite getOptions should detect current git hash if not passed in" time="0.022" classname="should detect current git hash if not passed in">
    </testcase>
    <testcase name="Root Suite getOptions should detect current git branch if not passed in" time="0.022" classname="should detect current git branch if not passed in">
    </testcase>
    <testcase name="Root Suite getOptions should detect detached git head if no hash passed in" time="0.028" classname="should detect detached git head if no hash passed in">
    </testcase>
    <testcase name="Root Suite getOptions should fail local Git detection if no .git directory" time="0.003" classname="should fail local Git detection if no .git directory">
    </testcase>
    <testcase name="Root Suite getOptions should set repo_token if it exists" time="0.047" classname="should set repo_token if it exists">
    </testcase>
    <testcase name="Root Suite getOptions should detect repo_token if not passed in" time="0.024" classname="should detect repo_token if not passed in">
    </testcase>
    <testcase name="Root Suite getOptions should set paralell if env var set" time="0.016" classname="should set paralell if env var set">
    </testcase>
    <testcase name="Root Suite getOptions should set service_name if it exists" time="0.012" classname="should set service_name if it exists">
    </testcase>
    <testcase name="Root Suite getOptions should set service_pull_request if it exists" time="0.012" classname="should set service_pull_request if it exists">
    </testcase>
    <testcase name="Root Suite getOptions should set service_name and service_job_id if it&apos;s running on travis - ci" time="0.012" classname="should set service_name and service_job_id if it&apos;s running on travis - ci">
    </testcase>
    <testcase name="Root Suite getOptions should set service_name and service_job_id if it&apos;s running on jenkins" time="0.012" classname="should set service_name and service_job_id if it&apos;s running on jenkins">
    </testcase>
    <testcase name="Root Suite getOptions should set service_name and service_job_id if it&apos;s running on circleci" time="0.013" classname="should set service_name and service_job_id if it&apos;s running on circleci">
    </testcase>
    <testcase name="Root Suite getOptions should set service_name and service_job_id if it&apos;s running on codeship" time="0.012" classname="should set service_name and service_job_id if it&apos;s running on codeship">
    </testcase>
    <testcase name="Root Suite getOptions should set service_name and service_job_id if it&apos;s running on wercker" time="0.012" classname="should set service_name and service_job_id if it&apos;s running on wercker">
    </testcase>
    <testcase name="Root Suite getOptions should set service_name and service_job_id if it&apos;s running on Gitlab" time="0.012" classname="should set service_name and service_job_id if it&apos;s running on Gitlab">
    </testcase>
    <testcase name="Root Suite getOptions should override set options with user options" time="0.014" classname="should override set options with user options">
    </testcase>
  </testsuite>
  <testsuite name="handleInput" timestamp="2016-03-19T18:28:22" tests="5" failures="0" time="0.009000000000000001">
    <testcase name="Root Suite handleInput returns an error when there&apos;s an error getting options" time="0.003" classname="returns an error when there&apos;s an error getting options">
    </testcase>
    <testcase name="Root Suite handleInput returns an error when there&apos;s an error converting" time="0.002" classname="returns an error when there&apos;s an error converting">
    </testcase>
    <testcase name="Root Suite handleInput returns an error when there&apos;s an error sending" time="0.002" classname="returns an error when there&apos;s an error sending">
    </testcase>
    <testcase name="Root Suite handleInput completes successfully when there are no errors" time="0.002" classname="completes successfully when there are no errors">
    </testcase>
  </testsuite>
  <testsuite name="parseJunitTest" timestamp="2016-03-19T18:28:22" tests="8" failures="0" time="0.028000000000000004">
    <testcase name="Root Suite parseJunitTest handles empty XML" time="0.016" classname="handles empty XML">
    </testcase>
    <testcase name="Root Suite parseJunitTest handles test suites containing errors" time="0.004" classname="handles test suites containing errors">
    </testcase>
    <testcase name="Root Suite parseJunitTest handles test suites containing failures" time="0.001" classname="handles test suites containing failures">
    </testcase>
    <testcase name="Root Suite parseJunitTest handles invalid attributes" time="0.003" classname="handles invalid attributes">
    </testcase>
    <testcase name="Root Suite parseJunitTest handles invalid XML" time="0.002" classname="handles invalid XML">
    </testcase>
    <testcase name="Root Suite parseJunitTest handles multiple test suites" time="0.001" classname="handles multiple test suites">
    </testcase>
    <testcase name="Root Suite parseJunitTest handles multiple test suites containing failures" time="0.001" classname="handles multiple test suites containing failures">
    </testcase>
    <testcase name="Root Suite parseJunitTest handles successful test suites" time="0" classname="handles successful test suites">
    </testcase>
  </testsuite>
  <testsuite name="logger" timestamp="2016-03-19T18:28:22" tests="4" failures="0" time="0">
    <testcase name="Root Suite logger should log at debug level when --verbose is set" time="0" classname="should log at debug level when --verbose is set">
    </testcase>
    <testcase name="Root Suite logger should log at debug level when NODE_CLIOSTATS_DEBUG is set in env" time="0" classname="should log at debug level when NODE_CLIOSTATS_DEBUG is set in env">
    </testcase>
    <testcase name="Root Suite logger should log at debug level when NODE_CLIOSTATS_DEBUG is set in env as a string" time="0" classname="should log at debug level when NODE_CLIOSTATS_DEBUG is set in env as a string">
    </testcase>
    <testcase name="Root Suite logger should log at warn level when NODE_CLIOSTATS_DEBUG not set and no --verbose" time="0" classname="should log at warn level when NODE_CLIOSTATS_DEBUG not set and no --verbose">
    </testcase>
  </testsuite>
  <testsuite name="sendToCliostats" timestamp="2016-03-19T18:28:22" tests="3" failures="0" time="0.001">
    <testcase name="Root Suite sendToCliostats passes on the correct params to request.post" time="0.001" classname="passes on the correct params to request.post">
    </testcase>
    <testcase name="Root Suite sendToCliostats allows sending to enterprise url" time="0" classname="allows sending to enterprise url">
    </testcase>
    <testcase name="Root Suite sendToCliostats writes output to stdout when --stdout is passed" time="0" classname="writes output to stdout when --stdout is passed">
    </testcase>
  </testsuite>
</testsuites>